generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model Organization {
  id                  String   @id @default(uuid())
  name                String
  clerkOrganizationId String   @unique
  users               User[]
  policies            Policy[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model User {
  id             String        @id @default(uuid())
  clerkUserId    String        @unique
  email          String        @unique
  firstName      String?
  lastName       String?
  role           UserRole      @default(USER)
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  policies       Policy[]
  logs           RequestLog[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([organizationId])
}

model Policy {
  id             String        @id @default(uuid())
  name           String
  description    String?
  userId         String
  user           User          @relation(fields: [userId], references: [id])
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  isActive       Boolean       @default(true)
  rules          Rule[]
  logs           RequestLog[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([userId])
  @@index([organizationId])
}

model Rule {
  id          String   @id @default(uuid())
  type        RuleType @default(SEMANTIC_BLOCK)
  name        String
  description String?
  pattern     String?  // For KEYWORD_BLOCK, stores keywords or regex patterns
  policyId    String
  policy      Policy   @relation(fields: [policyId], references: [id], onDelete: Cascade)
  embedding   Unsupported("vector(3072)")?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([policyId])
}

model RequestLog {
  id          String                 @id @default(uuid())
  userId      String
  user        User                   @relation(fields: [userId], references: [id])
  policyId    String?
  policy      Policy?                @relation(fields: [policyId], references: [id])
  request     Json
  response    Json?
  blocked     Boolean                @default(false)
  blockReason String?
  embedding   Unsupported("vector")?
  createdAt   DateTime               @default(now())

  @@index([userId])
  @@index([policyId])
}

enum UserRole {
  USER
  ADMIN
  OWNER
}

enum RuleType {
  SEMANTIC_BLOCK
  KEYWORD_BLOCK
}
